@page "/html-converter"
@inject IJSRuntime JS

<PageTitle>Html Converter</PageTitle>

<h1>This service allows to convert HTML file to PDF file</h1>

<InputFile OnChange="@LoadFiles"  accept=".html" />

@if (IsConverting)
{
    <h3>"@NotificationMessage"</h3>
}

<button onclick="@ConvertFile" disabled="@IsConvertDisabled">Convert</button> 
<button onclick="@DownloadFile" disabled="@IsDonwloadDisabled">Download</button>



@code {
    [Parameter]
    public bool IsDonwloadDisabled { get; set; } = true;

    [Parameter]
    public bool IsConvertDisabled { get; set; } = true;

    [Parameter]
    public bool IsConverting { get; set; } = false;
    public string NotificationMessage { get; set; }

    private FileSystemWatcher downloadWatcher = new FileSystemWatcher("//var/tmp/");

    private Guid clientGuid { get; set; } = Guid.NewGuid();
    private string fileName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        InitWatcher();

    }

    private async void PdfCreated(object sender, FileSystemEventArgs e)
    {
        IsDonwloadDisabled = false;
        NotificationMessage = "You file is ready for downloading!";
        await InvokeAsync(StateHasChanged);
    } 

    private async Task LoadFiles(InputFileChangeEventArgs f)
    {
        IsConvertDisabled = true;
        IsDonwloadDisabled = true;
        fileName = $"{clientGuid}:{f.File.Name}";

        using (FileStream fs = new FileStream($"/var/tmp/{fileName}", FileMode.Create))
        {
            await f.File.OpenReadStream().CopyToAsync(fs);
        }
        IsConvertDisabled = false;
        await InvokeAsync(StateHasChanged);

    }

    private void InitWatcher()
    {
        downloadWatcher.Created += PdfCreated;
        downloadWatcher.Filter = $"{clientGuid}*.pdf";
        downloadWatcher.EnableRaisingEvents = true;
    }


    private async Task ConvertFile()
    {
        IsConverting = true;
        IsConvertDisabled = true;
        NotificationMessage = "Please, wait! Your file is converting ...";
        await InvokeAsync(StateHasChanged);
        var result = await Client.Instance.AddDocumentToQueue(fileName); 
        if(result == -1)
        {
            NotificationMessage = "Something went wrong!";
            await InvokeAsync(StateHasChanged);
        }


    }
    private async Task DownloadFile()
    {
        var downloadFilenamePath = "//var/tmp/" + fileName.Split('.')[0] + ".pdf";
        var downloadFilename = downloadFilenamePath.Split(':')[1];
        Stream fileStream = File.OpenRead(downloadFilenamePath);
        using var streamRef = new DotNetStreamReference(fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", downloadFilename, streamRef);
        File.Delete(downloadFilenamePath);
        IsDonwloadDisabled = true;
        NotificationMessage = "Thank you for using our web service!";
        await InvokeAsync(StateHasChanged);

    }
}

